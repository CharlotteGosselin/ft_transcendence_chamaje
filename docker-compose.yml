services:
  nestjs:
    container_name: nestjs-container
    build:
      dockerfile: Dockerfile
      context: ./nestjs
      # Only use the development stage from our Dockerfile
      target: development
    volumes:
      - ${PWD}/nestjs:/app
      - ${PWD}/shared-lib:/shared-lib # mount the shared library into the nestjs container
      # - /usr/src/app/node_modules # creates an anonymous volume for node_modules which does not mount any directory from the host machine, thus it does not overwrite the node_modules that you've built in your Dockerfile.
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
    # Run a command against the development stage of the image
    command: ['sh', '-c', 'chmod +x /app/entrypoint.sh && ./entrypoint.sh']
    depends_on:
      - postgres
    ports:
      - '3000:3000'
      - '5555:5555'
    networks:
      - chamaje

  postgres:
    container_name: postgres-container
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      bash -c "chown -R postgres:postgres /var/lib/postgresql/data
      && exec docker-entrypoint.sh postgres"
    # pg_isready checks whether postgres is ready to accept connections
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
    ports:
      - '5432:5432'
    # volumes:
    #   - postgresql:/var/lib/postgresql/data
    networks:
      - chamaje

  react:
    container_name: react-container
    build:
      dockerfile: Dockerfile
      context: ./react-chamaje
      target: development
    restart: unless-stopped
    command: ['sh', '-c', 'chmod +x /app/entrypoint.sh && ./entrypoint.sh']
    ports:
      - '3001:3000'
    depends_on:
      - nestjs
    volumes:
      - ${PWD}/react-chamaje:/app
      - ${PWD}/shared-lib:/shared-lib # mount the shared library into the react container
    networks:
      - chamaje

  nginx:
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Mount the nginx.conf file
    ports:
      - '8080:80' # Expose Nginx on port 8080
    depends_on:
      - react
      - nestjs
    networks:
      - chamaje

volumes:
  postgresql:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/postgresql

networks:
  chamaje:
    driver: bridge
