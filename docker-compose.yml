services:
  api:
    build:
      dockerfile: Dockerfile
      context: ./nestjs
      # Only use the development stage from our Dockerfile
      target: development
    volumes:
      - ${PWD}/nestjs:/usr/src/app
      # - /usr/src/app/node_modules # creates an anonymous volume for node_modules which does not mount any directory from the host machine, thus it does not overwrite the node_modules that you've built in your Dockerfile.
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
    # Run a command against the development stage of the image
    command: npm run start:dev
    depends_on:
      - postgres
    ports:
      - '3000:3000'
      - '5555:5555'

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # pg_isready checks whether postgres is ready to accept connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
    ports:
      - '5432:5432'
    volumes:
      - postgresql:/var/lib/postgresql/data

  react:
    build:
      dockerfile: Dockerfile 
      context: ./react-chamaje
      target: development
    command: npm start
    restart: unless-stopped
    ports:
      - '3001:3000'
    depends_on:
      - api
    volumes:
      - ${PWD}/react-chamaje:/usr/src/app

volumes:
  postgresql:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/postgresql