// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int      @id @unique @default(autoincrement())
    ft_id        Int?     @unique
    hash         String?
    login        String   @unique
    email        String   @unique
    image        String?
    createdAt    DateTime @default(now())
    token        String?
    onlineStatus Boolean  @default(false)

    // Friendship system
    friends          User[]  @relation("Friendship")
    friendedBy       User[]  @relation("Friendship")
    isDefaultProfile Boolean @default(false)

    // Will be set to true if our user manually updated the corresponding values from their profiles
    login_is_locked Boolean @default(false)
    email_is_locked Boolean @default(false)
    image_is_locked Boolean @default(false)

    // Games logic
    gamesPlayed gameSession[]

    // Profile variables
    // These could be resolved upon fetch requests, but more efficient to store them directly
    killCount Int @default(0)

    // Target logic
    target                 User?   @relation("Target", fields: [targetId], references: [id])
    targetId               Int?
    targetedBy             User[]  @relation("Target")
    targetDiscoveredByUser Boolean @default(false)

    // Chat logic
    chatsSessions chatSession[]
    // chatsJoined   Chat[] @relation("contributors")
    // ownedChannels Chat[] @relation("owners")
    Message       Message[]

    // relation with User[] in Chat. maybe delete ?
    chatsJoined   Chat?         @relation(fields: [chatId], references: [id])
    chatId        Int?
}

model Game {
    id       Int           @id @default(autoincrement())
    playedAt DateTime      @default(now())
    players  gameSession[]
}

model gameSession {
    id       Int     @id @default(autoincrement())
    user     User    @relation(fields: [userId], references: [id])
    userId   Int
    game     Game    @relation(fields: [gameId], references: [id])
    gameId   Int
    score    Int
    isWinner Boolean
}

// Chat logic
model Chat {
    id           Int           @id @default(autoincrement())
    // Users       User?     @relation(fields: [userId], references: [id], "contributors")
    // userId       Int?
    participants chatSession[]
    messages     Message[] // here or in chatSession?
    isChannel    Boolean // true if not msg between 2 users
    isPrivate    Boolean // this will be true if it is a msg between 2 users
    isProtected  Boolean // true if password
    password     String?

    // to delete
    peopleInHere User[]
    // owner       User?     @relation(fields: [ownerId], references: [id], "owners")
    // ownerId      Int?
}

model chatSession {
    id     Int   @id @default(autoincrement())

    Chat   Chat? @relation(fields: [chatId], references: [id])
    chatId Int?
    
    User   User? @relation(fields: [userId], references: [id])
    userId Int?
    // lastOpen ? So we know when new msg
    // isChannel, isPrivate, isProtected here ?
}

model Message {
    id      Int      @id @default(autoincrement())
    
    Chat    Chat?    @relation(fields: [chatId], references: [id])
    chatId  Int?

    sentBy  User     @relation(fields: [userId], references: [id])
    userId  Int

    sentAt  DateTime @default(now())

    content String
}
