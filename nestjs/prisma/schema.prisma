// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @unique @default(autoincrement())
    ft_id     Int?     @unique
    hash      String?
    login     String   @unique
    email     String   @unique
    image     String?
    createdAt DateTime @default(now())
    token     String?

    // Friendship system
    friends          User[]  @relation("Friendship")
    friendedBy       User[]  @relation("Friendship")
    isDefaultProfile Boolean @default(false)

    // Will be set to true if our user manually updated the corresponding values from their profiles
    login_is_locked Boolean @default(false)
    email_is_locked Boolean @default(false)
    image_is_locked Boolean @default(false)

    // Games logic
    gamesPlayed gameSession[]

    // Profile variables
    // These could be resolved upon fetch requests, but more efficient to store them directly
    killCount Int @default(0)

	// Target logic
	target User? @relation("Target", fields: [targetId], references: [id])
	targetId Int?
	targetedBy User[] @relation("Target")
}

model Game {
    id        Int      @id @default(autoincrement())
    playedAt  DateTime @default(now())
	players gameSession[]
}

model gameSession {
	id Int @id @default(autoincrement())
	user User @relation(fields: [userId], references: [id])
	userId Int
	game Game @relation(fields: [gameId], references: [id])
	gameId Int
	score Int
	isWinner Boolean
}