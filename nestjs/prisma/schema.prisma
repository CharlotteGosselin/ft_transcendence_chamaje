// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlayerGameStatus {
    Waiting // Waiting for the game to start
    Ready // Player is ready to start the game (they presse the play button)
    Playing // Player is currently in a game
    Finished // Player finished the game
}


enum GameRoomStatus {
    Waiting // Waiting for players to join
    Full // Two players have joined the game
    InProgress // The game has started
    Finished // The game has ended
}

model User {
    id        Int      @id @unique @default(autoincrement())
    ft_id     Int?     @unique
    hash      String?
    login     String   @unique
    email     String   @unique
    image     String?
    createdAt DateTime @default(now())
    token     String?

    // Friendship system
    friends          User[]  @relation("Friendship")
    friendedBy       User[]  @relation("Friendship")
    isDefaultProfile Boolean @default(false)

    // Will be set to true if our user manually updated the corresponding values from their profiles
    login_is_locked Boolean @default(false)
    email_is_locked Boolean @default(false)
    image_is_locked Boolean @default(false)

    // Games logic
    gamesPlayed gameSession[]

    // Profile variables
    // These could be resolved upon fetch requests, but more efficient to store them directly
    killCount Int @default(0)

    // Target logic
    target                 User?   @relation("Target", fields: [targetId], references: [id])
    targetId               Int?
    targetedBy             User[]  @relation("Target")
    targetDiscoveredByUser Boolean @default(false)
}	

// TODO: give a status to the actual game ? Like WAITING / FINISHED
// TODO: should all games have an obligatory room ? Because we might end up with a lot of rooms after the matches are done.

model Game {
    id         Int           @id @default(autoincrement())
    playedAt   DateTime      @default(now())
    players    gameSession[]
    gameRoom   gameRoom      @relation(fields: [gameRoomId], references: [id])
    gameRoomId Int           @unique
}

model gameSession {
    id           Int              @id @default(autoincrement())
    user         User             @relation(fields: [userId], references: [id])
    userId       Int
    game         Game             @relation(fields: [gameId], references: [id])
    gameId       Int
    score        Int              @default(0)
    isWinner     Boolean          @default(false)
    playerStatus PlayerGameStatus @default(Waiting)
}

model gameRoom {
    id         Int            @id @default(autoincrement())
    gameStatus GameRoomStatus @default(Waiting)
    game       Game?
}
