// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @unique @default(autoincrement())
    ft_id     Int?     @unique
    hash      String?
    login     String   @unique
    email     String   @unique
    image     String?
    createdAt DateTime @default(now())
    token     String?

    // Friendship system
    friends          User[]  @relation("Friendship")
    friendedBy       User[]  @relation("Friendship")
    isDefaultProfile Boolean @default(false)

    // Will be set to true if our user manually updated the corresponding values from their profiles
    login_is_locked Boolean @default(false)
    email_is_locked Boolean @default(false)
    image_is_locked Boolean @default(false)

    // Games logic
    gamesPlayed Game[]

    // Bestie logic
    // The bestie should be stored as a User reference, because if we only store the user's login for example,
    // and that users updates their login, it could break profiles.
    bestFriend      User?   @relation("Bestie", fields: [bestFriendLogin], references: [login])
    bestFriendLogin String?
    bestFriendedBy  User[]  @relation("Bestie")

    // Profile variables
    // These could be resolved upon fetch requests, but more efficient to store them directly
    killCount Int @default(0)
}

model Game {
    id        Int      @id @default(autoincrement())
    playedAt  DateTime @default(now())
    player1Id Int
    player2Id Int
    winner    User     @relation(fields: [winnerId], references: [id])
    winnerId  Int
}
