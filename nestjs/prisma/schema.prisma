// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @unique @default(autoincrement())
    ft_id     Int?     @unique
    hash      String?
    login     String   @unique
    email     String   @unique
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    token     String?

    // Friendship system
    friends          User[]  @relation("Friendship")
    friendedBy       User[]  @relation("Friendship")
    isDefaultProfile Boolean @default(false)

    // Will be set to true if our user manually updated the corresponding values from their profiles
    login_is_locked Boolean @default(false)
    email_is_locked Boolean @default(false)
    image_is_locked Boolean @default(false)

    // Games logic
    gamesPlayedAsPlayer1 gameSession[] @relation("player1")
    gamesPlayedAsPlayer2 gameSession[] @relation("player2")
    gamesWon             gameSession[] @relation("winner")

    // Profile variables
    // These could be resolved upon fetch requests, but more efficient to store them directly
    killCount Int @default(0)

    // Bestie logic
    bestie    User?  @relation("Bestie", fields: [bestieId], references: [id])
    bestieId  Int?   @unique
    bestiedBy User[] @relation("Bestie")

    // Target logic
    target                 User?   @relation("Target", fields: [targetId], references: [id])
    targetId               Int?
    targetedBy             User[]  @relation("Target")
    targetDiscoveredByUser Boolean @default(false)

    // Rival logic
    rival   User?  @relation("Rival", fields: [rivalId], references: [id])
    rivalId Int?
    rivalOf User[] @relation("Rival")
}

model gameSession {
    id           Int        @id @default(autoincrement())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    player1Id    Int
    player2Id    Int
    player1Score   Int
    player2Score   Int
    winnerId     Int

    player1  User  @relation("player1", fields: [player1Id], references: [id])
    player2  User  @relation("player2", fields: [player2Id], references: [id])
    winner User  @relation("winner", fields: [winnerId], references: [id])
}
